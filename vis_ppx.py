import matplotlib.pyplot as pltdir_ = '/Users/jonathanjeng/Downloads/'filename = 'result_log_77500_256_64_0.001000_0.900000_RMSProp.txt'
path = dir_ + filename
def parseText(path):  txt = []  txt = open(path).read().split('\n')  txt = txt[7:]  txt2 = []  for line in txt:    if not line[0:4] == 'time':      txt2.append(line)      # Put perplexities and step numbers in appropriate arrays  stepNum = []  global_ppx = []  bucket0_ppx = []  bucket1_ppx = []  bucket2_ppx = []  bucket3_ppx = []  for line in txt2:    if line[0:1] == 'g':      stepNum.append(float(line[line.find('global step ')+len('global step '):line.find('learning rate ')-1]))      global_ppx.append(float(line[line.find(' perplexity ') + len(' perplexity '):-1]))    elif line.find(' 0 p') != -1:      bucket0_ppx.append(float(line[line.find('0 perplexity ') + len('0 perplexity '):-1]))    elif line.find(' 1 p') != -1:      bucket1_ppx.append(float(line[line.find('1 perplexity ') + len('1 perplexity '):-1]))    elif line.find(' 2 p') != -1:      bucket2_ppx.append(float(line[line.find('2 perplexity ') + len('2 perplexity '):-1]))    elif line.find(' 3 p') != -1:      bucket3_ppx.append(float(line[line.find('3 perplexity ') + len('3 perplexity '):-1]))    avgBucketPPX = []  for i in range(len(bucket0_ppx)):    avgBucketPPX.append( (bucket0_ppx[i]+bucket1_ppx[i]+bucket2_ppx[i]+bucket3_ppx[i])/4 )
  plt.plot(stepNum, global_ppx, 'r', label='Perplexity on Train Set')  plt.plot(stepNum, avgBucketPPX, 'b', label='Perplexity on Test Set')  trainMin = global_ppx[0]  trainMinInd = 0  for i in range(len(global_ppx)):    if global_ppx[i] < trainMin:      trainMin = global_ppx[i]      trainMinInd = i  print("min perplexity on train set: %f at step %d" % (trainMin, stepNum[trainMinInd]))    testMin = avgBucketPPX[0]  testMinInd = 0  for i in range(len(avgBucketPPX)):    if avgBucketPPX[i] < testMin:      testMin = avgBucketPPX[i]      testMinInd = i  print("min perplexity on test set: %f at step %d" % (testMin, stepNum[testMinInd]))  
  # The perplexity values span a large range over a small domain so a logarithmic scale seems appropriate here  plt.yscale('log')
  plt.ylabel('Perplexity (logarithmic scale)')  plt.xlabel('Step Number')  plt.xscale('linear')  plt.title('Perplexity with Training')  plt.legend()  plt.show()parseText(path)
